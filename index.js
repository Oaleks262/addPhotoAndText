import express from 'express';
import multer from 'multer';
import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import bodyParser from 'body-parser';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();
const openaiApiKey = process.env.OPENAI_API_KEY;

// Simple logging function
const log = (level, message, extra = {}) => {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, extra);
};

const app = express();
const port = process.env.PORT || 5000;
const IMAGE_QUALITY = parseInt(process.env.IMAGE_QUALITY) || 85;
const IMAGE_WIDTH = parseInt(process.env.IMAGE_WIDTH) || 800;
const IMAGE_HEIGHT = parseInt(process.env.IMAGE_HEIGHT) || 500;
const MAX_FILE_SIZE = parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024;
const upload = multer({ 
    dest: 'uploads/',
    limits: { 
        fileSize: MAX_FILE_SIZE,
        files: 20 
    },
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (JPEG, JPG, PNG, WebP)'));
        }
    }
});

app.use(express.static('public'));
app.use('/processed', express.static('processed'));
app.use('/archives', express.static('archives'));
app.use(bodyParser.json());

['uploads', 'processed', 'archives'].forEach((dir) => {
    if (!fs.existsSync(dir)) fs.mkdirSync(dir);
});

app.post('/upload', (req, res) => {
    upload.array('images', 20)(req, res, async (err) => {
        if (err) {
            log('error', 'Upload error', { error: err.message });
            return res.status(400).json({ error: err.message });
        }
        
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ error: '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏' });
        }
        
        try {
        const processedFiles = [];
        const fileNames = [];
        const archiveName = `archives/${Date.now()}.zip`;

        const baseRawName = req.body.baseName || 'Image';
        const safeBaseName = baseRawName.trim().replace(/\s+/g, '_');

        await Promise.all(req.files.map(async (file, index) => {
            const outputFile = `${safeBaseName}_${index + 1}.webp`;
            const outputPath = `processed/${outputFile}`;

            await sharp(file.path)
                .resize(IMAGE_WIDTH, IMAGE_HEIGHT, { 
                    fit: 'cover', 
                    position: 'center',
                    withoutEnlargement: true
                })
                .webp({ 
                    quality: IMAGE_QUALITY,
                    effort: 6 
                })
                .toFile(outputPath);

            // üßØ –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ try/catch
            try {
                await fs.promises.unlink(file.path);
            } catch (err) {
                console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ ${file.path}:`, err.message);
            }

            processedFiles.push(outputPath);
            fileNames.push(outputFile);
        }));

        const output = fs.createWriteStream(archiveName);
        const archive = archiver('zip', { zlib: { level: 9 } });

        archive.pipe(output);
        processedFiles.forEach(file => archive.file(file, { name: path.basename(file) }));
        await archive.finalize();

        res.json({ archive: `/${archiveName}`, fileNames });
        } catch (error) {
            log('error', 'Processing error', { error: error.message, stack: error.stack });
            res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å' });
        }
    });
});

app.post('/paraphrase', async (req, res) => {
    const { titles, contents, fileNames } = req.body;

    if (!Array.isArray(titles) || !Array.isArray(contents) || titles.length !== contents.length) {
        return res.status(400).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö' });
    }
    
    if (!openaiApiKey) {
        log('warning', 'OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback —Ä–µ–∂–∏–º');
        // Fallback mode - return original content with image paths
        const htmlBlocks = [];
        for (let i = 0; i < titles.length; i++) {
            const imageName = fileNames?.[i] || 'default.webp';
            const htmlTemplate = `
<h2>${titles[i]}</h2>
<p class="ptovar">${contents[i]}</p>
<p style="text-align: center;">
  <img alt="" src="/seo_images/pictures/gadgets//${imageName}" style="width: 800px;" loading="lazy">
</p>`;
            htmlBlocks.push(htmlTemplate);
        }
        return res.json({ htmlBlocks });
    }

    try {
        const htmlBlocks = [];

        for (let i = 0; i < titles.length; i++) {
            const imageName = fileNames?.[i] || 'default.webp';

            const htmlTemplate = `
<h2>${titles[i]}</h2>
<p class="ptovar">${contents[i]}</p>
<p style="text-align: center;">
  <img alt="" src="/seo_images/pictures/gadgets//${imageName}" style="width: 800px;" loading="lazy">
</p>`;

            const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∏–∑–±–µ–≥–∞—è –±—É–∫–≤–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
2. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–±–æ—Ä–æ—Ç—ã)
3. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –ø—Ä–æ–¥–∞—é—â–∏–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
4. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å—é HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
5. –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤ –≤–∏–¥–µ HTML-–∫–æ–¥–∞, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
${htmlTemplate}`;

            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${openaiApiKey}`,
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        { role: 'system', content: '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤. –ü–µ—Ä–µ–≤–æ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞—è –±—É–∫–≤–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞. –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –°–æ—Ö—Ä–∞–Ω—è–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.' },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.8,
                }),
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                log('error', `OpenAI API –ø–æ–º–∏–ª–∫–∞ ${response.status}`, { responseText: errorText });
                throw new Error(`OpenAI API –ø–æ–º–∏–ª–∫–∞: ${response.status} - ${errorText}`);
            }

            const data = await response.json();

            if (data.error) {
                log('error', 'OpenAI API error', { error: data.error });
                htmlBlocks.push('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ —Ü—å–æ–≥–æ –±–ª–æ–∫—É');
                continue;
            }

            const rawHtml = data.choices?.[0]?.message?.content?.trim() || '...';
            htmlBlocks.push(rawHtml);
        }

        res.json({ htmlBlocks });
    } catch (error) {
        log('error', 'Paraphrase error', { error: error.message, stack: error.stack });
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI' });
    }
});

// Cleanup function for old files
const cleanupOldFiles = () => {
    const dirs = ['uploads', 'processed', 'archives'];
    const maxAge = 24 * 60 * 60 * 1000; // 24 hours
    
    dirs.forEach(dir => {
        if (!fs.existsSync(dir)) return;
        
        fs.readdir(dir, (err, files) => {
            if (err) return;
            
            files.forEach(file => {
                const filePath = path.join(dir, file);
                fs.stat(filePath, (err, stats) => {
                    if (err) return;
                    
                    if (Date.now() - stats.mtime.getTime() > maxAge) {
                        fs.unlink(filePath, (err) => {
                            if (!err) log('info', `–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª: ${filePath}`);
                        });
                    }
                });
            });
        });
    });
};

// Run cleanup every hour
setInterval(cleanupOldFiles, 60 * 60 * 1000);
cleanupOldFiles(); // Initial cleanup

app.listen(port, () => {
    log('info', `–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: http://localhost:${port}`);
});
